import { CheckCircleIcon, WarningIcon } from "@chakra-ui/icons";

import {
  Alert,
  AlertDescription,
  AlertIcon,
  AlertTitle,
  Box, Collapse, Grid,
  GridItem, Input, keyframes, SkeletonCircle, Stack,
  Text
} from "@chakra-ui/react";
import { isAddress } from "@ethersproject/address";
import axios from "axios";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { useQuery } from "react-query";
import { operators } from "../lib/operators";
import { Filter } from "../types";

function useContractSimulation(address?: string) {
  return useQuery<{ results: Filter[] }, { error: string; detail: string }>(
    ["permissions", address],
    async () =>
      await axios
        .get(`/api/contracts/${address}`)
        .then((res) => res.data)
        .catch((err) => Promise.reject(err.response.data)),
    {
      enabled: !!address && isAddress(address),
    }
  );
}

const borderFlicker = keyframes`
  from { border-color: #8fa8b6; }
  to { border-color: #2f3d53; }
`;

const pulse = keyframes`
  from { transform: scale(0.95); }
  to { transform: scale(1); }
`;

export default function Home() {
  const inputRef = useRef<HTMLInputElement>(null);

  const [address, setAddress] = useState();
  const { isLoading, data, error } = useContractSimulation(address);

  useQueryParamSync("q", address);
  useEffect(() => {
    inputRef.current?.focus();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  
  const validAddress = address && isAddress(address);
  const blocked = data?.results.filter((res: Filter) => res.disabled) || [];
  const allowed = data?.results.filter((res: Filter) => !res.disabled) || [];

  return (
    <>
      <Head>
        <title>Permission</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Stack
        position={"absolute"}
        top={"50%"}
        left={"50%"}
        transform={"translate(-50%, -50%)"}
        spacing={0}
        maxWidth={650}
        boxShadow={"lg"}
        borderRadius={8}
        w={["90%", "75%", "50%", "50%"]}
      >
        <Stack
          spacing={5}
          borderRadius={8}
          transform={"scale(1)"}
          borderBottomRadius={Boolean(data) ? 0 : 8}
          border="1px solid rgb(31 41 75)"
          animation={` 0.5s ease-in-out infinity`}
          background={"rgb(31 41 55)"}
          padding={8}
        >
          <Box>
            <Text
              align={"center"}
              fontSize={"lg"}
              fontWeight="bold"
              color={"orange.400"}
            >
              &gt; token grade
            </Text>
            <Text align={"center"}>
              {!isLoading && 'Check any contract for marketplace restrictions'}
              {isLoading && `Simulating transfers on ${operators.length} marketplaces...`}
            </Text>
          </Box>
          <Input
            ref={inputRef}
            borderColor={"gray.700"}
            name="address"
            animation={isLoading ? `${borderFlicker} 0.5s ease-in-out infinite`: undefined}
            value={address}
            cursor={isLoading ? "wait" : "text"}
            focusBorderColor={"gray.600"}
            onChange={(e) => setAddress(e.target.value)}
            disabled={isLoading}
            placeholder="0x938..."
            bg={"gray.800"}
            size={"lg"}
          />
        </Stack>

        <Stack bg={"white"} color={"gray.800"} borderBottomRadius={8} boxShadow="lg">
          {error && (
            <Box padding="8">
              <Alert variant={"subtle"} alignItems={"start"} wordBreak="break-all">
                <AlertIcon />
                <Box>
                  <AlertTitle>We couldn&apos;t verify that contract</AlertTitle>
                  <AlertDescription display="block">
                    Are you sure that&apos;s the right address?
                  </AlertDescription>
                </Box>
              </Alert>
            </Box>
          )}

          <Collapse animateOpacity in={Boolean(data)}>
            {isLoading && <Box padding="8">
              <Text fontSize={"lg"} fontWeight="bold">
                Checking {operators.length} Marketplaces...
              </Text>
              <Grid
                templateColumns={{
                  md: "repeat(2, 1fr)",
                  sm: "repeat(1, 1fr)",
                }}
              >
                {operators.map((res: Filter) => (
                  <GridItem key={res.address}>
                    <Box sx={{ display: "flex", alignItems: "center" }}>
                      <SkeletonCircle size="4" mr="2" />
                      {res.name}
                    </Box>
                  </GridItem>
                ))}
              </Grid>
            </Box>}

            {data && (
              <Box padding="8">
                <Text fontSize={"lg"} fontWeight="bold">
                  {blocked.length === 0 && "No Marketplaces Blocked"}
                  {blocked.length === 1 && "1 Marketplace Blocked"}
                  {blocked.length > 1 &&
                    `${blocked.length} Marketplaces Blocked`}
                </Text>
                <Grid
                  templateColumns={{
                    md: "repeat(2, 1fr)",
                    sm: "repeat(1, 1fr)",
                  }}
                >
                  {data.results.map((res: Filter) => (
                    <GridItem key={res.address}>
                      {res.disabled ? (
                        <WarningIcon color={"red.700"} mt={-1} />
                      ) : (
                        <CheckCircleIcon color={"green.700"} mt={-1} />
                      )}{" "}
                      {res.name}
                    </GridItem>
                  ))}
                </Grid>
              </Box>
            )}
          </Collapse>
        </Stack>
      </Stack>
    </>
  );
}

function useQueryParamSync(
  key: string,
  value: string | number | null | undefined
) {
  useEffect(() => {
    const q = new URLSearchParams(window.location.search);
    if (!value) {
      q.delete(key);
    } else {
      q.set(key, value + "");
    }

    const path = window.location.pathname + "?" + q.toString();
    history.pushState(null, "", path);
  }, [key, value]);
}
